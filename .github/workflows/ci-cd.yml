name: üß™ Zengineer CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  frontend:
    name: üé® Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: üìÇ Checkout code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: üì¶ Install dependencies
        run: |
          echo "Installing frontend dependencies..."
          npm ci
      
      - name: üîß Lint check
        run: |
          echo "Running lint checks..."
          npm run lint --if-present || echo "No lint script found, skipping..."
      
      - name: üß™ Run tests
        run: |
          echo "Running frontend tests..."
          npm run test --if-present -- --watch=false --browsers=ChromeHeadless || echo "No test script found, skipping..."
      
      - name: üèóÔ∏è Build
        run: |
          echo "Building frontend..."
          npm run build

  backend:
    name: üîß Backend Build & Test  
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: üìÇ Checkout code
        uses: actions/checkout@v4
      
      - name: üê≥ Build Docker image
        run: |
          echo "Building backend Docker image..."
          docker build -t zengineer-backend:latest .
          echo "‚úÖ Backend Docker image built successfully"

  integration:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    steps:
      - name: üìÇ Checkout code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js for auth tests
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: üì¶ Install root dependencies
        run: |
          echo "Installing dependencies for auth tests..."
          npm ci

      - name: üê≥ Start services with Docker Compose
        run: |
          echo "Starting services..."
          docker-compose up -d --build
          sleep 30
          echo "Checking service status:"
          docker-compose ps

      - name: üß™ Run Auth Integration Tests
        run: |
          echo "üîê Running authentication integration tests..."
          node test-auth.js
        env:
          POCKETBASE_URL: http://localhost:8080

      - name: ü©∫ Health checks
        run: |
          echo "Running health checks..."
          curl -f http://localhost:3000 || echo "‚ö†Ô∏è Frontend not responding"
          curl -f http://localhost:8080/api/health || echo "‚ö†Ô∏è Backend not responding"
        continue-on-error: true

      - name: üõë Stop services
        run: |
          echo "Stopping services..."
          docker-compose down -v
        if: always()

  notify:
    name: üì¢ Notification
    runs-on: ubuntu-latest
    needs: [frontend, backend, integration]
    if: always()
    steps:
      - name: üìä Pipeline Summary
        run: |
          echo "=== üß™ Zengineer CI/CD Pipeline Results ==="
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Backend: ${{ needs.backend.result }}"  
          echo "Integration: ${{ needs.integration.result }}"
          
          if [[ "${{ needs.frontend.result }}" == "success" && "${{ needs.backend.result }}" == "success" && "${{ needs.integration.result }}" == "success" ]]; then
            echo "üéâ All tests passed! Ready to deploy."
          else
            echo "‚ùå Some tests failed. Check the logs above."
            exit 1
          fi

jobs:
  frontend:
    runs-on: ubuntu-latest  # A frontend job Ubuntu runneren fut
    defaults:
      run:
        working-directory: frontend  # Minden parancs a frontend mapp√°ban fut
        shell: bash
    steps:
      - uses: actions/checkout@v4  # K√≥d let√∂lt√©se
      
      - name: Make error formatter executable
        run: chmod +x .github/scripts/format-error.sh
      
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20  # Node.js 20 be√°ll√≠t√°sa
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Display Node.js and npm versions
        run: |
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "Working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
      
      - name: Install dependencies
        run: |
          echo "Installing npm dependencies..."
          npm ci --verbose 2>&1 | tee npm-install.log  # F√ºgg≈ës√©gek telep√≠t√©se r√©szletes outputtal
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå NPM install failed!"
            chmod +x ../../.github/scripts/format-error.sh
            ../../.github/scripts/format-error.sh "npm_install" "npm-install.log" "Frontend dependency installation"
            exit 1
          fi
          echo "‚úÖ Dependencies installed successfully"
        continue-on-error: false
      
      - name: Display package.json scripts
        run: |
          echo "Available npm scripts:"
          npm run --silent
          echo "Package.json content:"
          cat package.json | jq '.scripts' 2>/dev/null || echo "jq not available, showing raw package.json"
      
      - name: Lint
        run: |
          echo "Running lint checks..."
          npm run lint --if-present 2>&1 | tee lint-output.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå Lint errors found:"
            cat lint-output.log
            exit 1
          fi
          echo "‚úÖ Lint checks passed"
        continue-on-error: false
      
      - name: Test
        run: |
          echo "Running unit tests..."
          npm run test --if-present -- --watch=false --browsers=ChromeHeadless --code-coverage 2>&1 | tee test-output.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå Tests failed:"
            cat test-output.log
            exit 1
          fi
          echo "‚úÖ All tests passed"
        continue-on-error: false
      
      - name: Build
        run: |
          echo "Building production frontend..."
          echo "Available disk space before build:"
          df -h
          npm run build --if-present 2>&1 | tee build-output.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå Build failed!"
            chmod +x ../../.github/scripts/format-error.sh
            ../../.github/scripts/format-error.sh "npm_build" "build-output.log" "Frontend production build"
            echo "Build directory contents (if exists):"
            ls -la dist/ 2>/dev/null || echo "No dist directory found"
            exit 1
          fi
          echo "‚úÖ Build successful"
          echo "Build output directory:"
          ls -la dist/ 2>/dev/null || echo "No dist directory found"
        continue-on-error: false
      
      - name: Build Docker image
        run: |
          echo "Building Docker image for frontend..."
          echo "Dockerfile content:"
          cat Dockerfile
          echo "Building image..."
          docker build -t zengineer-frontend:latest . --progress=plain 2>&1 | tee docker-build.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå Docker build failed!"
            chmod +x ../../.github/scripts/format-error.sh
            ../../.github/scripts/format-error.sh "docker_build" "docker-build.log" "Frontend Docker image build"
            echo "Docker system info:"
            docker system df
            docker images
            exit 1
          fi
          echo "‚úÖ Docker image built successfully"
          docker images | grep zengineer-frontend
          
      - name: Generate error report on failure
        if: failure()
        run: |
          chmod +x ../../.github/scripts/generate-error-report.sh
          ../../.github/scripts/generate-error-report.sh
          
      - name: Upload error artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-error-logs
          path: frontend/artifacts/
          retention-days: 30

  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend  # Minden parancs a backend mapp√°ban fut
        shell: bash
    steps:
      - uses: actions/checkout@v4  # K√≥d let√∂lt√©se
      
      - name: Make scripts executable
        run: |
          chmod +x .github/scripts/format-error.sh
          chmod +x .github/scripts/generate-error-report.sh
      
      - name: Display backend directory structure
        run: |
          echo "Backend directory contents:"
          ls -la
          echo "Current working directory: $(pwd)"
      
      - name: Check Dockerfile
        run: |
          echo "Dockerfile content:"
          cat Dockerfile 2>/dev/null || echo "‚ùå Dockerfile not found in backend directory"
          if [ ! -f Dockerfile ]; then
            echo "Available files:"
            find . -name "Dockerfile*" -o -name "*.dockerfile"
            exit 1
          fi
      
      - name: Build Docker image
        run: |
          echo "Building Docker image for backend..."
          docker build -t zengineer-backend:latest . --progress=plain 2>&1 | tee backend-docker-build.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå Backend Docker build failed!"
            chmod +x ../../.github/scripts/format-error.sh
            ../../.github/scripts/format-error.sh "docker_build" "backend-docker-build.log" "Backend Docker image build"
            echo "Docker system info:"
            docker system df
            docker images
            exit 1
          fi
          echo "‚úÖ Backend Docker image built successfully"
          docker images | grep zengineer-backend
          
      - name: Generate error report on failure
        if: failure()
        run: |
          chmod +x ../../.github/scripts/generate-error-report.sh
          ../../.github/scripts/generate-error-report.sh
          
      - name: Upload error artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: backend-error-logs
          path: backend/artifacts/
          retention-days: 30

  integration:
    runs-on: ubuntu-latest
    needs: [frontend, backend]  # Csak akkor indul, ha a frontend √©s backend job sikeres
    steps:
      - uses: actions/checkout@v4  # K√≥d let√∂lt√©se
      
      - name: Check Docker Compose file
        run: |
          echo "Checking docker-compose.yml..."
          if [ -f docker-compose.yml ]; then
            echo "Docker Compose file found:"
            cat docker-compose.yml
          else
            echo "‚ùå docker-compose.yml not found in root directory"
            echo "Available files in root:"
            ls -la
            exit 1
          fi
      
      - name: Docker Compose up
        run: |
          echo "Starting services with Docker Compose..."
          docker-compose up -d --build 2>&1 | tee docker-compose-up.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå Docker Compose failed to start!"
            chmod +x .github/scripts/format-error.sh
            .github/scripts/format-error.sh "docker_compose" "docker-compose-up.log" "Docker Compose service startup"
            echo "Docker Compose logs:"
            docker-compose logs
            exit 1
          fi
          echo "‚úÖ Services started successfully"
      
      - name: Wait for services and check health
        run: |
          echo "Waiting for services to be ready..."
          sleep 15
          echo "Checking service status:"
          docker-compose ps
          echo "Service logs:"
          docker-compose logs --tail=50

      - name: Setup Node.js for integration tests
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install root dependencies for auth tests
        run: |
          echo "Installing root level dependencies for auth tests..."
          npm ci

      - name: Run Auth Integration Tests
        run: |
          echo "üß™ Running authentication integration tests..."
          echo "Testing complete auth flow: register ‚Üí login ‚Üí logout ‚Üí delete"
          node test-auth.js
          if [ $? -ne 0 ]; then
            echo "‚ùå Auth tests failed!"
            exit 1
          fi
          echo "‚úÖ Auth tests passed successfully!"

      - name: Basic health checks
        run: |
          echo "Running basic health checks..."
          # Frontend health check
          echo "Checking frontend (port 3000)..."
          curl -f http://localhost:3000 || echo "‚ö†Ô∏è Frontend not responding on port 3000"
          
          # Backend health check  
          echo "Checking backend (port 8080)..."
          curl -f http://localhost:8080/api/health || curl -f http://localhost:8080 || echo "‚ö†Ô∏è Backend not responding on port 8080"
        continue-on-error: true
      
      - name: Docker Compose down
        run: |
          echo "Stopping services..."
          docker-compose down -v 2>&1 | tee docker-compose-down.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ö†Ô∏è Warning: Docker Compose down failed:"
            cat docker-compose-down.log
          fi
          echo "‚úÖ Services stopped"
        if: always()  # Ez mindig lefut, m√©g hiba eset√©n is
        
      - name: Generate error report on failure
        if: failure()
        run: |
          chmod +x .github/scripts/generate-error-report.sh
          .github/scripts/generate-error-report.sh
          
      - name: Upload error artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-error-logs
          path: artifacts/
          retention-days: 30

  notify:
    runs-on: ubuntu-latest
    needs: [frontend, backend, integration]
    if: always()  # Mindig lefut, f√ºggetlen√ºl a t√∂bbi job eredm√©ny√©t≈ël
    steps:
      - name: Check job results and notify
        run: |
          echo "=== CI/CD Pipeline Summary ==="
          echo "Frontend job: ${{ needs.frontend.result }}"
          echo "Backend job: ${{ needs.backend.result }}"
          echo "Integration job: ${{ needs.integration.result }}"
          
          if [[ "${{ needs.frontend.result }}" == "failure" ]]; then
            echo "‚ùå Frontend job failed!"
          elif [[ "${{ needs.frontend.result }}" == "success" ]]; then
            echo "‚úÖ Frontend job succeeded!"
          fi
          
          if [[ "${{ needs.backend.result }}" == "failure" ]]; then
            echo "‚ùå Backend job failed!"
          elif [[ "${{ needs.backend.result }}" == "success" ]]; then
            echo "‚úÖ Backend job succeeded!"
          fi
          
          if [[ "${{ needs.integration.result }}" == "failure" ]]; then
            echo "‚ùå Integration job failed!"
          elif [[ "${{ needs.integration.result }}" == "success" ]]; then
            echo "‚úÖ Integration job succeeded!"
          fi
          
          # √ñsszes√≠tett eredm√©ny
          if [[ "${{ needs.frontend.result }}" == "success" && "${{ needs.backend.result }}" == "success" && "${{ needs.integration.result }}" == "success" ]]; then
            echo "üéâ All jobs completed successfully!"
            exit 0
          else
            echo "‚ö†Ô∏è One or more jobs failed. Check the logs above for details."
            exit 1
          fi
