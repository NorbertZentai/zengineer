name: 🧪 Zengineer CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  frontend:
    name: 🎨 Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📦 Install dependencies
        run: |
          echo "Installing frontend dependencies..."
          npm ci
      
      - name: 🔧 Lint check
        run: |
          echo "Running lint checks..."
          npm run lint --if-present || echo "No lint script found, skipping..."
      
      - name: 🧪 Run tests
        run: |
          echo "Running frontend tests..."
          npm run test --if-present -- --watch=false --browsers=ChromeHeadless || echo "No test script found, skipping..."
      
      - name: 🏗️ Build
        run: |
          echo "Building frontend..."
          npm run build

  backend:
    name: 🔧 Backend Build & Test  
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐳 Build Docker image
        run: |
          echo "Building backend Docker image..."
          docker build -t zengineer-backend:latest .
          echo "✅ Backend Docker image built successfully"

  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js for auth tests
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 📦 Install root dependencies
        run: |
          echo "Installing dependencies for auth tests..."
          if [ -f package.json ]; then
            npm ci
          else
            echo "No package.json found, skipping npm install"
          fi

      - name: 🐳 Start services with Docker Compose
        run: |
          echo "Starting services..."
          if [ -f docker-compose.yml ]; then
            docker-compose up -d --build
            sleep 30
            echo "Checking service status:"
            docker-compose ps
          else
            echo "No docker-compose.yml found, skipping Docker setup"
            exit 1
          fi

      - name: 🧪 Run Auth Integration Tests
        run: |
          echo "🔐 Running authentication integration tests..."
          if [ -f test-auth.js ]; then
            node test-auth.js
          else
            echo "test-auth.js not found, skipping auth tests"
            exit 1
          fi
        env:
          POCKETBASE_URL: http://localhost:8080

      - name: 🩺 Health checks
        run: |
          echo "Running health checks..."
          curl -f http://localhost:3000 || echo "⚠️ Frontend not responding"
          curl -f http://localhost:8080/api/health || echo "⚠️ Backend not responding"
        continue-on-error: true

      - name: 🛑 Stop services
        run: |
          echo "Stopping services..."
          if command -v docker-compose >/dev/null 2>&1; then
            docker-compose down -v || echo "Failed to stop services"
          fi
        if: always()

  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [frontend, backend, integration]
    if: always()
    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "=== 🧪 Zengineer CI/CD Pipeline Results ==="
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Backend: ${{ needs.backend.result }}"  
          echo "Integration: ${{ needs.integration.result }}"
          
          if [[ "${{ needs.frontend.result }}" == "success" && "${{ needs.backend.result }}" == "success" && "${{ needs.integration.result }}" == "success" ]]; then
            echo "🎉 All tests passed! Ready to deploy."
          else
            echo "❌ Some tests failed. Check the logs above."
            exit 1
          fi
