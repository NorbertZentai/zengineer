# Egyszer≈±s√≠tett Dockerfile csak a migr√°ci√≥ tesztel√©s√©re
FROM nginx:stable-alpine

# Copy a simple HTML file for testing
COPY <<EOF /usr/share/nginx/html/index.html
<!DOCTYPE html>
<html>
<head>
    <title>Zengineer - Supabase Connection Test</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .success { color: #4CAF50; font-size: 24px; font-weight: bold; }
        .info { background: #e3f2fd; padding: 15px; border-radius: 4px; margin: 20px 0; }
        .test-result { padding: 10px; margin: 10px 0; border-radius: 4px; }
        .test-success { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
        .test-error { background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
        .test-pending { background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; }
        button { background: #2196F3; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin: 5px; }
        button:hover { background: #1976D2; }
        .step { margin: 10px 0; padding: 10px; border-left: 4px solid #2196F3; }
        #connectionDetails { font-family: monospace; background: #f8f9fa; padding: 15px; border-radius: 4px; margin: 10px 0; }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
</head>
<body>
    <div class="container">
        <h1>üéØ Zengineer - Supabase Connection Test</h1>
        <div class="success">‚úÖ Docker Environment Running Successfully</div>
        
        <div class="info">
            <h3>Migration Summary:</h3>
            <ul>
                <li>‚úÖ PocketBase backend removed</li>
                <li>‚úÖ Supabase cloud backend integrated</li>
                <li>‚úÖ Frontend-only Docker container</li>
                <li>‚úÖ No more hibernation data loss!</li>
            </ul>
        </div>

        <h2>üîó Connection Tests</h2>
        
        <div id="connectionDetails">
            <strong>Environment Variables:</strong><br>
            SUPABASE_URL: <span id="supabaseUrl">Loading...</span><br>
            SUPABASE_KEY: <span id="supabaseKey">Loading...</span>
        </div>

        <div class="test-result test-pending" id="dockerTest">
            üì¶ Docker Container: Running (you can see this page!)
        </div>

        <div class="test-result test-pending" id="supabaseTest">
            üîÑ Supabase Connection: <span id="supabaseStatus">Testing...</span>
        </div>

        <div class="test-result test-pending" id="tablesTest">
            üóÑÔ∏è Database Tables: <span id="tablesStatus">Testing...</span>
        </div>

        <button onclick="testConnections()">üîÑ Test All Connections</button>
        <button onclick="testAuth()">üë§ Test Authentication</button>
        <button onclick="clearTests()">üßπ Clear Results</button>

        <div id="testResults"></div>

        <h2>Next Steps for Full Deployment:</h2>
        <div class="step">
            <strong>1. ‚úÖ Supabase Setup Complete:</strong><br>
            Your Supabase project is configured and running
        </div>
        <div class="step">
            <strong>2. üîß Connection Testing:</strong><br>
            Use the buttons above to test Supabase connectivity
        </div>
        <div class="step">
            <strong>3. üöÄ Ready for Angular:</strong><br>
            Once connections work, the full Angular app can be deployed
        </div>

        <div class="info">
            <strong>Original Problem Solved:</strong><br>
            ‚ùå Before: PocketBase hibernation caused data loss<br>
            ‚úÖ After: Supabase cloud backend - no hibernation, persistent data!
        </div>
    </div>

    <script>
        let supabase;
        
        // Display environment info
        document.getElementById('supabaseUrl').textContent = 'https://eiktdiiziwesatueiyht.supabase.co';
        document.getElementById('supabaseKey').textContent = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (hidden for security)';

        // Initialize Supabase client
        try {
            supabase = window.supabase.createClient(
                'https://eiktdiiziwesatueiyht.supabase.co',
                'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVpa3RkaWl6aXdlc2F0dWVpeWh0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIzNDQ4ODIsImV4cCI6MjA2NzkyMDg4Mn0.YpMFYilCeBY6nuhJPB_HiiqvNIhi0zULyRwjcbhx-yU'
            );
            updateTestResult('supabaseTest', 'test-success', '‚úÖ Supabase Client: Connected');
        } catch (error) {
            updateTestResult('supabaseTest', 'test-error', '‚ùå Supabase Client: Failed - ' + error.message);
        }

        function updateTestResult(elementId, className, message) {
            const element = document.getElementById(elementId);
            element.className = 'test-result ' + className;
            element.innerHTML = message;
        }

        function addResult(message, isSuccess = true) {
            const div = document.createElement('div');
            div.className = 'test-result ' + (isSuccess ? 'test-success' : 'test-error');
            div.innerHTML = message;
            document.getElementById('testResults').appendChild(div);
        }

        async function testConnections() {
            document.getElementById('testResults').innerHTML = '<h3>üîÑ Running Connection Tests...</h3>';
            
            // Test 1: Basic Supabase connection
            try {
                const { data, error } = await supabase.from('quizzes').select('count', { count: 'exact', head: true });
                if (error) throw error;
                addResult('‚úÖ Database Connection: Successfully connected to quizzes table');
                updateTestResult('tablesTest', 'test-success', '‚úÖ Database Tables: Accessible');
            } catch (error) {
                addResult('‚ùå Database Connection Failed: ' + error.message, false);
                updateTestResult('tablesTest', 'test-error', '‚ùå Database Tables: ' + error.message);
            }

            // Test 2: Check all tables exist
            const tables = ['quizzes', 'quiz_cards', 'quiz_folders', 'quiz_sessions'];
            for (const table of tables) {
                try {
                    const { data, error } = await supabase.from(table).select('count', { count: 'exact', head: true });
                    if (error) throw error;
                    addResult(\`‚úÖ Table "\${table}": Exists and accessible\`);
                } catch (error) {
                    addResult(\`‚ùå Table "\${table}": \${error.message}\`, false);
                }
            }

            // Test 3: Test authentication endpoint
            try {
                const { data, error } = await supabase.auth.getSession();
                addResult('‚úÖ Authentication Endpoint: Reachable (no active session)');
            } catch (error) {
                addResult('‚ùå Authentication Endpoint: ' + error.message, false);
            }
        }

        async function testAuth() {
            document.getElementById('testResults').innerHTML = '<h3>üë§ Testing Authentication...</h3>';
            
            try {
                // Test sign up with a test account
                const testEmail = 'test' + Date.now() + '@example.com';
                const testPassword = 'testpassword123';
                
                const { data, error } = await supabase.auth.signUp({
                    email: testEmail,
                    password: testPassword
                });
                
                if (error) throw error;
                
                addResult('‚úÖ Authentication Test: Sign up successful');
                addResult('üìß Test User Created: ' + testEmail);
                
                // Clean up - sign out
                await supabase.auth.signOut();
                addResult('‚úÖ Sign Out: Successful');
                
            } catch (error) {
                addResult('‚ùå Authentication Test Failed: ' + error.message, false);
            }
        }

        function clearTests() {
            document.getElementById('testResults').innerHTML = '';
        }

        // Auto-run basic connection test on page load
        window.addEventListener('load', () => {
            setTimeout(testConnections, 1000);
        });
    </script>
</body>
</html>
EOF

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
