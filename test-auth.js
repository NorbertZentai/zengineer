import PocketBase from 'pocketbase';

// Docker k√∂rnyezet URL-je
const pb = new PocketBase('http://localhost:8080');

async function testRegistration() {
  console.log('üß™ Regisztr√°ci√≥ teszt kezd√©se...');
  
  const testUser = {
    email: `test-${Date.now()}@example.com`,
    password: 'testpassword123',
    passwordConfirm: 'testpassword123',
    name: 'Test User'
  };
  
  try {
    const record = await pb.collection('users').create(testUser);
    console.log('‚úÖ Regisztr√°ci√≥ sikeres!');
    console.log(`   User ID: ${record.id}`);
    console.log(`   Email: ${record.email}`);
    console.log(`   Name: ${record.name}`);
    return testUser;
  } catch (error) {
    console.error('‚ùå Regisztr√°ci√≥ hiba:');
    console.error('   Error:', error.message);
    if (error.data) {
      console.error('   Details:', JSON.stringify(error.data, null, 2));
    }
    throw error;
  }
}

async function testLogin(credentials) {
  console.log('\nüîë Bejelentkez√©s teszt kezd√©se...');
  
  try {
    const authData = await pb.collection('users').authWithPassword(
      credentials.email,
      credentials.password
    );
    
    console.log('‚úÖ Bejelentkez√©s sikeres!');
    console.log(`   Token l√©tezik: ${!!authData.token}`);
    console.log(`   User ID: ${authData.record.id}`);
    console.log(`   Email: ${authData.record.email}`);
    console.log(`   Name: ${authData.record.name}`);
    
    // Ellen≈ërizz√ºk, hogy be vagyunk-e jelentkezve
    const isValid = pb.authStore.isValid;
    console.log(`   Auth store valid: ${isValid}`);
    
    return authData;
  } catch (error) {
    console.error('‚ùå Bejelentkez√©s hiba:');
    console.error('   Error:', error.message);
    if (error.data) {
      console.error('   Details:', JSON.stringify(error.data, null, 2));
    }
    throw error;
  }
}

async function testLogout() {
  console.log('\nüö™ Kijelentkez√©s teszt kezd√©se...');
  
  try {
    pb.authStore.clear();
    console.log('‚úÖ Kijelentkez√©s sikeres!');
    console.log(`   Auth store valid: ${pb.authStore.isValid}`);
  } catch (error) {
    console.error('‚ùå Kijelentkez√©s hiba:', error.message);
    throw error;
  }
}

async function testBackendConnection() {
  console.log('üåê Backend kapcsolat tesztel√©se...');
  
  try {
    const healthCheck = await fetch('http://localhost:8080/api/health');
    const response = await healthCheck.json();
    
    if (response.code === 200) {
      console.log('‚úÖ Backend el√©rhet≈ë!');
      console.log(`   Message: ${response.message}`);
    } else {
      console.log('‚ö†Ô∏è  Backend v√°laszolt, de nem OK st√°tusszal');
      console.log('   Response:', response);
    }
  } catch (error) {
    console.error('‚ùå Backend nem el√©rhet≈ë:', error.message);
    throw error;
  }
}

async function testUserDeletion(testUser) {
  console.log('\nüóëÔ∏è  Felhaszn√°l√≥ t√∂rl√©s teszt kezd√©se...');
  
  try {
    // Ellen≈ërizz√ºk, hogy be vagyunk-e jelentkezve
    if (!pb.authStore.isValid) {
      console.log('   Bejelentkez√©s a t√∂rl√©shez...');
      await pb.collection('users').authWithPassword(testUser.email, testUser.password);
    }
    
    const userId = pb.authStore.model.id;
    console.log(`   T√∂rlend≈ë User ID: ${userId}`);
    
    // Felhaszn√°l√≥ t√∂rl√©se
    await pb.collection('users').delete(userId);
    
    console.log('‚úÖ Felhaszn√°l√≥ t√∂rl√©s sikeres!');
    console.log(`   T√∂r√∂lt User ID: ${userId}`);
    
    // Auth store tiszt√≠t√°sa
    pb.authStore.clear();
    console.log('   Auth store tiszt√≠tva');
    
    return true;
  } catch (error) {
    console.error('‚ùå Felhaszn√°l√≥ t√∂rl√©s sikertelen!');
    console.error(`   Hiba: ${error.message}`);
    if (error.data) {
      console.error('   Details:', JSON.stringify(error.data, null, 2));
    }
    throw error;
  }
}

async function runTests() {
  console.log('üöÄ Zengineer Auth Teszt Suit ind√≠t√°sa\\n');
  
  try {
    // 1. Backend kapcsolat teszt
    await testBackendConnection();
    
    // 2. Regisztr√°ci√≥ teszt
    const testUser = await testRegistration();
    
    // 3. Bejelentkez√©s teszt
    await testLogin(testUser);
    
    // 4. Kijelentkez√©s teszt
    await testLogout();
    
    // 5. √öjra bejelentkez√©s teszt
    await testLogin(testUser);
    
    // 6. Felhaszn√°l√≥ t√∂rl√©s teszt
    await testUserDeletion(testUser);
    
    console.log('\nüéâ Minden teszt sikeres!');
    console.log('\nüìù √ñsszefoglal√≥:');
    console.log('   ‚úÖ Backend el√©rhet≈ë');
    console.log('   ‚úÖ Regisztr√°ci√≥ m≈±k√∂dik');
    console.log('   ‚úÖ Bejelentkez√©s m≈±k√∂dik');
    console.log('   ‚úÖ Kijelentkez√©s m≈±k√∂dik');
    console.log('   ‚úÖ √öjra bejelentkez√©s m≈±k√∂dik');
    console.log('   ‚úÖ Felhaszn√°l√≥ t√∂rl√©s m≈±k√∂dik');
    
  } catch (error) {
    console.log('\nüí• Teszt hib√°val fejez≈ëd√∂tt be!');
    process.exit(1);
  }
}

// Teszt futtat√°sa
runTests();
